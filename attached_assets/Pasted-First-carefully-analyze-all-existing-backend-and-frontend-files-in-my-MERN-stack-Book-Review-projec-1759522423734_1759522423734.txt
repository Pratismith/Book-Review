First, carefully analyze all existing backend and frontend files in my MERN stack Book Review project, and only create new files if the required ones are missing—do not create duplicates of files that already exist. Ensure all functional requirements are met: implement User Authentication (signup with name, unique email, hashed password; login with email/password; return JWT; protect routes with middleware), Book Management (add books with title, author, description, genre, published year; only creators can edit/delete; all users can view books; implement pagination with 5 books per page), and a Review System (add/edit/delete reviews with rating 1–5 and text; show all reviews with average rating on book details page). Use Node.js, Express, MongoDB Atlas, and Mongoose with bcrypt, JWT, and MVC structure for the backend, and React with React Router, Context API, Axios/Fetch, and Tailwind CSS/Bootstrap for the frontend. Follow schema design: User {name, email, password}, Book {title, author, description, genre, year, addedBy}, Review {bookId, userId, rating, reviewText}. Make sure the following pages exist and are functional: Signup, Login, Book List (Home with pagination and missing tabs added consistently across required pages), Book Details (with reviews and average rating), Add/Edit Book (only for logged-in users), and Profile (bonus: user’s books and reviews). Ensure each page has a modern, attractive, responsive design with a solid background and relevant images. Optionally add features like search, filter, sorting, rating distribution charts, dark/light mode toggle, and deployment setup (backend on Render/Heroku/AWS, frontend on Vercel/Netlify). After finishing, generate a comprehensive README.md including: project description and tech stack, exact setup steps (backend & frontend), environment variable setup, how to run backend and frontend, usage guide with screenshots or GIFs, implemented features, improvement ideas, modification instructions (themes, layouts, schemas), solutions to errors faced during development, and deployment steps with Postman collection for APIs. Ensure clean, modular, well-documented code and smooth navigation across the whole app.