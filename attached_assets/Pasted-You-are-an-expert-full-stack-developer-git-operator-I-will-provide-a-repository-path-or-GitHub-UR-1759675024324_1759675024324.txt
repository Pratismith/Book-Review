You are an expert full-stack developer + git operator. I will provide a repository path or GitHub URL. Your goal:

1) Inspect the repository (no destructive action yet). Produce a short report listing:
   - top-level directories and files,
   - package.json locations,
   - any deployment / CI config files (search for: netlify.toml, _redirects, firebase.json, .firebaserc, Procfile, Dockerfile, docker-compose.yml, now.json, app.json, vercel.json, .github/workflows/*, .gitlab-ci.yml, .circleci/*, Azure pipelines, etc),
   - build scripts and where the frontend and backend live (e.g. /frontend, /client, /backend, /server).

2) Make a safe backup:
   - create and push a branch named `backup/cleanup-<yyyy-mm-dd>` containing the repo as-is, and create a compressed tarball `repo-backup-<yyyy-mm-dd>.tar.gz` saved next to the repo. (Do not delete anything yet.)

3) Create a cleaned repository copy (call it `clean-repo`) that contains *only* what is required to run and deploy the MERN app:
   - include only: frontend folder (React), backend folder (Express), root README.md, LICENSE (if present), package.json files required by each project, and a root-level `.gitignore`.
   - exclude everything not needed for production: CI builds for previous platforms, leftover configs from other providers, `node_modules`, local .env files, deployment copies (.netlify, .now, etc). **Do not** include any `.env` or secret files — replace secret values with placeholders in example `.env.example`.
   - commit that cleaned copy on a new branch `clean/init` and create an initial commit message: "chore: create clean repo skeleton for Vercel deploy".

4) If both frontend and backend exist, prepare them for deployment on Vercel:
   A. Backend (Express): ensure `src/index.js` or `server/index.js` exports the Express app as default (or uses `app.listen` for local dev). If not, create a minimal wrapper `src/index.js`:
      ```
      import express from 'express';
      const app = express();
      // ... existing middleware/routes import ...
      export default app;
      ```
      (This allows Vercel to deploy Express as a Serverless Function or as fluid compute per Vercel docs.)

   B. Frontend (Create React App or similar): ensure `package.json` has a `build` script (`npm run build`) and that the build output is `build/` (Create React App) or `dist/`. Make any necessary small fixes to ensure `npm run build` succeeds.

5) Create recommended config files (only if missing):
   - `.gitignore` with `node_modules`, `.env`, `dist`, `build`, `.DS_Store`.
   - `README.md` with instructions to run locally, how to set env vars (do **not** put secrets), and how to deploy to Vercel.
   - `vercel.json` **(optional)** only if needed to set monorepo root/builder hints. Example minimal `vercel.json` (monorepo usage):
     ```
     {
       "projects": [],
       "builds": [],
       "routes": []
     }
     ```
     (Do not add heavy routing until you confirm final layout.)

6) Replace local `.env` files with `.env.example` showing variable names only. For your provided `.env`, produce `.env.example`:    PORT=3001
MONGO_URI=MONGO_URI
JWT_SECRET=JWT_SECRET
NODE_ENV=production

Add a note in README: “Do not commit real .env”; set these in Vercel dashboard or CLI.

7) Provide step-by-step Vercel deployment instructions for both options:
Option A (recommended, minimal change): **Keep MongoDB Atlas** and deploy:
  - Frontend → Vercel (static)
  - Backend → Vercel (Express exported as default) as its own Vercel Project / root directory (or as a function in a monorepo)
  - Use Vercel UI or CLI to set environment variables (MONGO_URI, JWT_SECRET, FRONTEND_URL, NODE_ENV).
  - Provide CLI commands for adding envs and for `vercel` deploy.

Option B (optional, more work): **Migrate from MongoDB to Firebase Firestore**:
  - Explain required code changes (models -> Firestore collections), provide a migration script outline (Node script that streams from Mongo and writes to Firestore using the Admin SDK).
  - Warn about complexity (auth, indexes, query differences) and suggest keeping MongoDB until you're ready for a full migration.

8) Provide exact shell commands for:
- backup branch creation,
- copying required folders into a new directory,
- creating new git repo and pushing to remote (optionally with `gh` CLI),
- adding Vercel environment variables using `vercel env add` or via the dashboard,
- running `vercel` or `vc deploy` to preview and then production deploy.

9) After the cleaned repo is created and committed, run `npm ci` and `npm run build` for frontend and `npm test` (if present) for each package, and list any immediate build errors.

10) Produce a short final checklist for the user with:
- what to set in Vercel (env names),
- how to test API endpoints after deploy,
- common pitfalls and how to fix them (CORS, express.static not used for Vercel, function size limits).

Assumptions you may make (and document):
- backend is Node/Express, frontend is React (Create React App). If not, list required differences.
- DB by default is MongoDB Atlas (MONGO_URI present). If asked to migrate to Firestore, perform migration steps on request.

Finally: produce a single ZIP (or show exact `tar` command) that contains the cleaned repo content and a `deploy-instructions.txt` file that the user can follow. End your output with the exact commands the user should copy/paste locally to push the cleaned repo to GitHub and to connect to Vercel.

If you encounter anything ambiguous, do a non-destructive dry-run and list what you'd delete and why — do not delete without creating the `backup/cleanup-<date>` branch first.

FRONTEND_URL=FRONTEND_URL        