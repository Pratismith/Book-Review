You are an expert full-stack developer + git operator. I will provide a repository path or GitHub URL. Your goal:

1) Inspect the repository (no destructive action yet). Produce a short report listing:
   - top-level directories and files,
   - package.json locations,
   - any deployment / CI config files (search for: netlify.toml, _redirects, firebase.json, .firebaserc, Procfile, Dockerfile, docker-compose.yml, now.json, app.json, vercel.json, .github/workflows/*, .gitlab-ci.yml, .circleci/*, Azure pipelines, etc),
   - build scripts and where the frontend and backend live (e.g. /frontend, /client, /backend, /server).

2) Make a safe backup:
   - create and push a branch named `backup/cleanup-<yyyy-mm-dd>` containing the repo as-is, and create a compressed tarball `repo-backup-<yyyy-mm-dd>.tar.gz` saved next to the repo. (Do not delete anything yet.)

3) Create a cleaned repository copy (call it `clean-repo`) that contains *only* what is required to run and deploy the MERN app:
   - include only: frontend folder (React), backend folder (Express), root README.md, LICENSE (if present), package.json files required by each project, and a root-level `.gitignore`.
   - exclude everything not needed for production: CI builds for previous platforms, leftover configs from other providers, `node_modules`, local .env files, deployment copies (.netlify, .now, etc). **Do not** include any `.env` or secret files â€” replace secret values with placeholders in example `.env.example`.
   - commit that cleaned copy on a new branch `clean/init` and create an initial commit message: "chore: create clean repo skeleton for Vercel deploy".

4) If both frontend and backend exist, prepare them for deployment on Vercel:
   A. Backend (Express): ensure `src/index.js` or `server/index.js` exports the Express app as default (or uses `app.listen` for local dev). If not, create a minimal wrapper `src/index.js`:
      ```
      import express from 'express';
      const app = express();
      // ... existing middleware/routes import ...
      export default app;
      ```
      (This allows Vercel to deploy Express as a Serverless Function or as fluid compute per Vercel docs.)

   B. Frontend (Create React App or similar): ensure `package.json` has a `build` script (`npm run build`) and that the build output is `build/` (Create React App) or `dist/`. Make any necessary small fixes to ensure `npm run build` succeeds.

5) Create recommended config files (only if missing):
   - `.gitignore` with `node_modules`, `.env`, `dist`, `build`, `.DS_Store`.
   - `README.md` with instructions to run locally, how to set env vars (do **not** put secrets), and how to deploy to Vercel.
   - `vercel.json` **(optional)** only if needed to set monorepo root/builder hints. Example minimal `vercel.json` (monorepo usage):
     ```
     {
       "projects": [],
       "builds": [],
       "routes": []
     }
     ```
     (Do not add heavy routing until you confirm final layout.)

6) Replace local `.env` files with `.env.example` showing variable names only. For your provided `.env`, produce `.env.example`:
